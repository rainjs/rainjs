server/oauth2.js":{"coverage":[null,8,null,8,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,null,null,9,null,null,null,null,null,null,null,null,null,null,null,null,8,5,null,null,5,4,4,null,null,4,4,4,4,null,null,2,2,2,2,null,null,2,null,null,null,null,null,null,2,2,2,null,null,0,null,0,null,null,null,null,1,1,null,null,null,null,null,null,null,null,null,null,null,null,8,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8,6,null,null,6,1,1,null,null,5,5,5,3,3,null,null,2,2,null,null,null,6,null,null,8],"source":["<span class=\"s\">'use strict'</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> http <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'http'</span><span class=\"k\">),</span>","    https <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'https'</span><span class=\"k\">),</span>","    url <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'url'</span><span class=\"k\">),</span>","    util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">),</span>","    RestService <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./rest_service'</span><span class=\"k\">),</span>","    logger <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/logging'</span><span class=\"k\">).</span>get<span class=\"k\">(),</span>","    Promise <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Implements an OAuth 2 client to communicate with Cloudia's authorization server.</span>","<span class=\"c\"> * It implements the client credentials grant.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} endpoint the token endpoint to be used to authenticate</span>","<span class=\"c\"> * @param {String} clientId the client id used to authenticate</span>","<span class=\"c\"> * @param {String} clientSecret the password used to authenticate</span>","<span class=\"c\"> * @param {String} scope the scope for which the token is requested</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name OAuth2</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> OAuth2<span class=\"k\">(</span>endpoint<span class=\"k\">,</span> clientId<span class=\"k\">,</span> clientSecret<span class=\"k\">,</span> scope<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">/**</span>","<span class=\"c\">     * The OAuth service instance.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @type {String}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @memberOf OAuth2#</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>oAuthService <span class=\"k\">=</span> <span class=\"k\">new</span> RestService<span class=\"k\">(</span>endpoint<span class=\"k\">,</span> <span class=\"k\">{</span>","        <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'application/x-www-form-urlencoded'</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * The username used by the client to authenticate with the authorization server</span>","<span class=\"c\">     * @type {String}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @memberOf OAuth2#</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>clientId <span class=\"k\">=</span> clientId<span class=\"k\">;</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * The password used by the client to authenticate with the authorization server</span>","<span class=\"c\">     * @type {String}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @memberOf OAuth2#</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>clientSecret <span class=\"k\">=</span> clientSecret<span class=\"k\">;</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * The scope of the requested token</span>","<span class=\"c\">     * @type {String}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @memberOf OAuth2#</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>scope <span class=\"k\">=</span> scope<span class=\"k\">;</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * The date that will be posted to the authorization server</span>","<span class=\"c\">     * @type {String}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @memberOf OAuth2#</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>postData <span class=\"k\">=</span>","        util<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">'grant_type=client_credentials&amp;client_id=%s&amp;client_secret=%s&amp;scope=%s'</span><span class=\"k\">,</span>","            clientId<span class=\"k\">,</span> clientSecret<span class=\"k\">,</span> scope<span class=\"k\">);</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Cached token data</span>","<span class=\"c\">     * @type {Object}</span>","<span class=\"c\">     * @private</span>","<span class=\"c\">     * @memberOf OAuth2#</span>","<span class=\"c\">     */</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>tokenData <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Gets a new token. This method is invoked when the token isn't cached or when the cached token</span>","<span class=\"c\"> * expired.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {OAuth2} self the class instance</span>","<span class=\"c\"> * @param {Function} fn a callback that will be invoked with error and token data as parameters</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @memberOf OAuth2#</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> getNewToken<span class=\"k\">(</span>self<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> data <span class=\"k\">=</span> <span class=\"k\">[],</span>","        requestTime <span class=\"k\">=</span> Date<span class=\"k\">.</span>now<span class=\"k\">();</span>","","    self<span class=\"k\">.</span>oAuthService<span class=\"k\">.</span>post<span class=\"k\">(</span><span class=\"s\">'/oauth/token'</span><span class=\"k\">,</span> self<span class=\"k\">.</span>postData<span class=\"k\">).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","        res<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'data'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>chunk<span class=\"k\">)</span> <span class=\"k\">{</span>","            data<span class=\"k\">.</span>push<span class=\"k\">(</span>chunk<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        res<span class=\"k\">.</span>on<span class=\"k\">(</span><span class=\"s\">'end'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> parsed<span class=\"k\">;</span>","            <span class=\"k\">try</span> <span class=\"k\">{</span>","                parsed <span class=\"k\">=</span> JSON<span class=\"k\">.</span>parse<span class=\"k\">(</span>data<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">));</span>","            <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// If the status code is 200 the response must be valid json.</span>","                fn<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'A HTTP error occurred'</span><span class=\"k\">,</span> RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">,</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">));</span>","                logger<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">'OAuth: an error occured while parsing endpoint response'</span><span class=\"k\">);</span>","                logger<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">,</span> e<span class=\"k\">);</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode <span class=\"k\">===</span> <span class=\"s\">200</span> <span class=\"k\">&amp;&amp;</span> parsed<span class=\"k\">.</span>access_token<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">//taking network delays in consideration;</span>","                <span class=\"c\">//expires at is actually a little smaller than the actual expiration date;</span>","                <span class=\"c\">//this means there is a small window in which the same token will be received</span>","                <span class=\"c\">//(with a very small expires_in);</span>","                <span class=\"c\">//this can happen because CloudIA's OAuth 2 token end point returns the same</span>","                <span class=\"c\">//token for the same client until this token expires.</span>","                parsed<span class=\"k\">.</span>expiresAt <span class=\"k\">=</span> requestTime <span class=\"k\">+</span> parsed<span class=\"k\">.</span>expires_in <span class=\"k\">*</span> <span class=\"s\">1000</span><span class=\"k\">;</span>","                fn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> parsed<span class=\"k\">);</span>","                logger<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'OAuth: retrieved token: '</span> <span class=\"k\">+</span> parsed<span class=\"k\">.</span>access_token <span class=\"k\">+</span>","                             <span class=\"s\">' which expires at: '</span> <span class=\"k\">+</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span>parsed<span class=\"k\">.</span>expiresAt<span class=\"k\">));</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                fn<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span>parsed<span class=\"k\">.</span>error_description <span class=\"k\">||</span> <span class=\"s\">'Unknown Error'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_AUTHORIZATION<span class=\"k\">,</span> parsed<span class=\"k\">.</span>error <span class=\"k\">||</span> <span class=\"s\">'unknown_error'</span><span class=\"k\">));</span>","                logger<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">'OAuth: an error has occured while retrieving the auth token: '</span><span class=\"k\">,</span>","                             <span class=\"k\">(</span>parsed<span class=\"k\">.</span>error_description <span class=\"k\">||</span> <span class=\"s\">'Unknown Error'</span><span class=\"k\">));</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        fn<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">\"Can't connect to the authentication server\"</span><span class=\"k\">,</span> RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">));</span>","        logger<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">'OAuth: Can</span><span class=\"t\">\\'</span><span class=\"s\">t connect to the authentication server'</span><span class=\"k\">,</span> error<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Checks if the token is expired.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {OAuth2} self the class instance</span>","<span class=\"c\"> * @returns {Boolean} indicates if the cached token is expired or not.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> * @memberOf OAuth2#</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> isTokenExpired<span class=\"k\">(</span>self<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> Date<span class=\"k\">.</span>now<span class=\"k\">()</span> <span class=\"k\">&gt;=</span> self<span class=\"k\">.</span>tokenData<span class=\"k\">.</span>expiresAt<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Obtains a token. This token is cached so that a request is made to the authorization server</span>","<span class=\"c\"> * only the first time or when the token expires.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @returns {Promise} a promise thaw will be resolved with the token</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @example</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *     var oauth = new OAuth2('url', 'id', 'secret', 'scope');</span>","<span class=\"c\"> *     oauth.getToken().then(</span>","<span class=\"c\"> *         function (token) {</span>","<span class=\"c\"> *             //do something with the token</span>","<span class=\"c\"> *         },</span>","<span class=\"c\"> *         function (error) {</span>","<span class=\"c\"> *             //an error occurred</span>","<span class=\"c\"> *         }</span>","<span class=\"c\"> *     );</span>","<span class=\"c\"> *</span>","<span class=\"c\"> */</span>","OAuth2<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getToken <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> promise <span class=\"k\">=</span> <span class=\"k\">new</span> Promise<span class=\"k\">.</span>Deferred<span class=\"k\">(),</span>","        self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>tokenData <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>isTokenExpired<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">))</span> <span class=\"k\">{</span>","        process<span class=\"k\">.</span>nextTick<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            promise<span class=\"k\">.</span>resolve<span class=\"k\">(</span>self<span class=\"k\">.</span>tokenData<span class=\"k\">.</span>access_token<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        logger<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'OAuth: token expired, fetching a new one'</span><span class=\"k\">);</span>","        getNewToken<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","                promise<span class=\"k\">.</span>reject<span class=\"k\">(</span>error<span class=\"k\">);</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            self<span class=\"k\">.</span>tokenData <span class=\"k\">=</span> data<span class=\"k\">;</span>","            promise<span class=\"k\">.</span>resolve<span class=\"k\">(</span>self<span class=\"k\">.</span>tokenData<span class=\"k\">.</span>access_token<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> promise<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> OAuth2<span class=\"k\">;</span>"]},"server/rest_factory.js":{"coverage":[null,11,null,11,null,null,null,null,null,null,null,null,null,null,11,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,null,2,2,null,null,null,null,1,null,1,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,1,null,null,3,null,3,null,null,3,null,null,3,2,null,null,3,null,2,2,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,null,1,null,null,null,null,null,2,null,null,null,null,null,null,null,null,null,null,null,null,null,3,null,3,2,null,null,3,2,null,1,null,3,null,3],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> OAuth <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./oauth2'</span><span class=\"k\">),</span>","    RestService <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./rest_service'</span><span class=\"k\">),</span>","    registry <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./hip_registry'</span><span class=\"k\">).</span>get<span class=\"k\">(),</span>","    logger <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/logging'</span><span class=\"k\">).</span>get<span class=\"k\">(),</span>","    defer <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">).</span>defer<span class=\"k\">,</span>","    seq <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">).</span>seq<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name RestFactory</span>","<span class=\"c\"> * @namespace The class responsable for creating instances of the Restfull service client.</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> RestFactory <span class=\"k\">=</span> module<span class=\"k\">.</span>exports <span class=\"k\">=</span> <span class=\"k\">{</span>","    services<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","    oAuthService<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Factory method for restful services that takes in a service alias and</span>","<span class=\"c\">     * creates a :js:class:`RestService` instance with the service endpoint</span>","<span class=\"c\">     * obtained from the HIP Registry.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * Optionally it can authenticate through OAuth if the oauth options are specified</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {String} bundle the bundle the service resides in</span>","<span class=\"c\">     * @param {String} service the alias of the service for which we are generating a client</span>","<span class=\"c\">     * @param {Object} [oAuth] the OAuth configuration settings</span>","<span class=\"c\">     * @param {String} [oAuth.bundle='hip-bundle'] the bundle in which the authorization for this client resides</span>","<span class=\"c\">     * @param {String} [oAuth.service='hip-authorizationservice'] the alias of the authorization service for this client</span>","<span class=\"c\">     * @param {String} [oAuth.clientId] the client id for the OAuth client</span>","<span class=\"c\">     * @param {String} [oAuth.clientSecret] the client secret for the OAuth client</span>","<span class=\"c\">     * @param {String} [oAuth.clientScope] the scope of the OAuth client</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @returns {RestService} an instance of the requested rest service</span>","<span class=\"c\">     * @name create</span>","<span class=\"c\">     * @function</span>","<span class=\"c\">     * @memberOf RestFactory</span>","<span class=\"c\">     */</span>","    create<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bundle<span class=\"k\">,</span> service<span class=\"k\">,</span> oAuth<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> deferred <span class=\"k\">=</span> defer<span class=\"k\">();</span>","","        oAuth<span class=\"k\">.</span>bundle <span class=\"k\">=</span> oAuth<span class=\"k\">.</span>bundle <span class=\"k\">||</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">;</span>","        oAuth<span class=\"k\">.</span>service <span class=\"k\">=</span> oAuth<span class=\"k\">.</span>service <span class=\"k\">||</span> <span class=\"s\">'hip-authorizationservice'</span><span class=\"k\">;</span>","","        logger<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'RestFactory: creating service client for '</span> <span class=\"k\">+</span> bundle <span class=\"k\">+</span> <span class=\"s\">', '</span> <span class=\"k\">+</span> service<span class=\"k\">);</span>","        seq<span class=\"k\">([</span>","            RestFactory<span class=\"k\">.</span>_authorize<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> oAuth<span class=\"k\">),</span>","            RestFactory<span class=\"k\">.</span>_getEndpoint<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> bundle<span class=\"k\">,</span> service<span class=\"k\">),</span>","            RestFactory<span class=\"k\">.</span>_getService<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> service<span class=\"k\">)</span>","        <span class=\"k\">]).</span>then<span class=\"k\">(</span>deferred<span class=\"k\">.</span>resolve<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","            logger<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">'RestFactory: error while creating the client for service \"'</span> <span class=\"k\">+</span>","                         service <span class=\"k\">+</span> <span class=\"s\">'\"</span><span class=\"t\">\\n</span><span class=\"s\">'</span><span class=\"k\">,</span> error<span class=\"k\">);</span>","            deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Error while creating the client for service \"'</span> <span class=\"k\">+</span>","                                          service <span class=\"k\">+</span> <span class=\"s\">'\".'</span><span class=\"k\">,</span> RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","","        <span class=\"k\">return</span> deferred<span class=\"k\">.</span>promise<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Retrieve the OAuth token for the client.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {Object} [oAuth] the OAuth configuration settings</span>","<span class=\"c\">     * @param {String} [oAuth.bundle='hip-bundle'] the bundle in which the authorization for this client resides</span>","<span class=\"c\">     * @param {String} [oAuth.service='hip-authorizationservice'] the alias of the authorization service for this client</span>","<span class=\"c\">     * @param {String} [oAuth.clientId] the client id for the OAuth client</span>","<span class=\"c\">     * @param {String} [oAuth.clientSecret] the client secret for the OAuth client</span>","<span class=\"c\">     * @param {String} [oAuth.clientScope] the scope of the OAuth client</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @returns {String} the OAuth token</span>","<span class=\"c\">     */</span>","    _authorize<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>oAuth<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"c\">// skip OAuth if no settings are specified</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span>oAuth <span class=\"k\">||</span> <span class=\"k\">!</span>oAuth<span class=\"k\">.</span>clientId <span class=\"k\">||</span> <span class=\"k\">!</span>oAuth<span class=\"k\">.</span>clientSecret <span class=\"k\">||</span> <span class=\"k\">!</span>oAuth<span class=\"k\">.</span>clientScope<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> seq<span class=\"k\">([</span>","            <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> registry<span class=\"k\">.</span>getService<span class=\"k\">(</span>oAuth<span class=\"k\">.</span>bundle<span class=\"k\">,</span> oAuth<span class=\"k\">.</span>service<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","            <span class=\"k\">function</span> <span class=\"k\">(</span>endpoint<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> service <span class=\"k\">=</span> oAuth<span class=\"k\">.</span>clientId <span class=\"k\">+</span> <span class=\"s\">':'</span> <span class=\"k\">+</span> oAuth<span class=\"k\">.</span>clientScope <span class=\"k\">+</span> <span class=\"s\">'@'</span> <span class=\"k\">+</span>","                                oAuth<span class=\"k\">.</span>bundle <span class=\"k\">+</span> <span class=\"s\">'/'</span> <span class=\"k\">+</span> oAuth<span class=\"k\">.</span>service<span class=\"k\">;</span>","","                <span class=\"k\">if</span> <span class=\"k\">(!</span>RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">])</span> <span class=\"k\">{</span>","                    RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">if</span> <span class=\"k\">(</span>RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">].</span>endpoint <span class=\"k\">!=</span> endpoint <span class=\"k\">||</span>","                    <span class=\"k\">!</span>RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">].</span>client<span class=\"k\">)</span> <span class=\"k\">{</span>","                    RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">].</span>endpoint <span class=\"k\">=</span> endpoint<span class=\"k\">;</span>","                    RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">].</span>client <span class=\"k\">=</span> <span class=\"k\">new</span> OAuth<span class=\"k\">(</span>endpoint<span class=\"k\">,</span> oAuth<span class=\"k\">.</span>clientId<span class=\"k\">,</span>","                        oAuth<span class=\"k\">.</span>clientSecret<span class=\"k\">,</span> oAuth<span class=\"k\">.</span>clientScope<span class=\"k\">);</span>","                <span class=\"k\">}</span>","","                <span class=\"k\">return</span> RestFactory<span class=\"k\">.</span>oAuthService<span class=\"k\">[</span>service<span class=\"k\">].</span>client<span class=\"k\">.</span>getToken<span class=\"k\">();</span>","            <span class=\"k\">}</span>","        <span class=\"k\">]);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Get the endpoint for the client from the hip registry.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {String} bundle the bundle the service is located in</span>","<span class=\"c\">     * @param {String} service the service to fetch the endpoint for</span>","<span class=\"c\">     * @param {String} [token] the OAuth token to authorize calls to the endpoint with</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @returns {Object} an object containing the token and endpoint</span>","<span class=\"c\">     */</span>","    _getEndpoint<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bundle<span class=\"k\">,</span> service<span class=\"k\">,</span> token<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> deferred <span class=\"k\">=</span> defer<span class=\"k\">();</span>","","        registry<span class=\"k\">.</span>getService<span class=\"k\">(</span>bundle<span class=\"k\">,</span> service<span class=\"k\">)</span>","            <span class=\"k\">.</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>endpoint<span class=\"k\">)</span> <span class=\"k\">{</span>","                deferred<span class=\"k\">.</span>resolve<span class=\"k\">(</span><span class=\"k\">{</span>","                    token<span class=\"k\">:</span> token<span class=\"k\">,</span>","                    endpoint<span class=\"k\">:</span> endpoint","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span> deferred<span class=\"k\">.</span>reject<span class=\"k\">);</span>","","        <span class=\"k\">return</span> deferred<span class=\"k\">.</span>promise<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">,</span>","","    <span class=\"c\">/**</span>","<span class=\"c\">     * Create a RestService instance for a given.</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @param {String} service the service to create a client for</span>","<span class=\"c\">     * @param {Object} options the settings for the service</span>","<span class=\"c\">     * @param {String} options.endpoint the endpoint to create the client to</span>","<span class=\"c\">     * @param {String} [options.token] the OAuth token to use when authorizing the request</span>","<span class=\"c\">     *</span>","<span class=\"c\">     * @returns {RestService} the rest service</span>","<span class=\"c\">     */</span>","    _getService<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>service<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> headers <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>token<span class=\"k\">)</span> <span class=\"k\">{</span>","            headers<span class=\"k\">.</span>Authorization <span class=\"k\">=</span> <span class=\"s\">'Bearer '</span> <span class=\"k\">+</span> options<span class=\"k\">.</span>token<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(!</span>RestFactory<span class=\"k\">.</span>services<span class=\"k\">[</span>service<span class=\"k\">])</span> <span class=\"k\">{</span>","            RestFactory<span class=\"k\">.</span>services<span class=\"k\">[</span>service<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> RestService<span class=\"k\">(</span>options<span class=\"k\">.</span>endpoint<span class=\"k\">,</span> headers<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            RestFactory<span class=\"k\">.</span>services<span class=\"k\">[</span>service<span class=\"k\">].</span>setEndpoint<span class=\"k\">(</span>options<span class=\"k\">.</span>endpoint<span class=\"k\">);</span>","        <span class=\"k\">}</span>","        logger<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'RestFactory: successfully created service client for '</span> <span class=\"k\">+</span> service<span class=\"k\">);</span>","","        <span class=\"k\">return</span> RestFactory<span class=\"k\">.</span>services<span class=\"k\">[</span>service<span class=\"k\">];</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"]},"server/hip_registry.js":{"coverage":[null,13,null,13,null,null,null,null,null,null,null,null,null,null,null,null,null,null,13,13,2,null,null,null,11,null,null,null,null,null,null,null,13,null,null,null,null,null,null,null,null,null,13,null,null,null,null,null,null,null,null,null,13,null,null,null,null,null,null,null,13,null,null,null,null,null,null,13,12,10,null,null,12,null,null,null,null,null,null,null,null,null,13,3,null,null,null,null,3,null,null,3,null,null,null,null,null,null,3,null,null,null,null,null,null,null,null,null,null,null,13,5,1,null,null,1,null,1,null,null,4,4,4,null,1,null,null,1,null,1,null,null,3,2,null,1,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,13,1,null,null,1,null,null,null,13],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> config <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/configuration'</span><span class=\"k\">),</span>","    RestService <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./rest_service'</span><span class=\"k\">),</span>","    Promise <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">),</span>","    Deferred <span class=\"k\">=</span> Promise<span class=\"k\">.</span>Deferred<span class=\"k\">,</span>","    when <span class=\"k\">=</span> Promise<span class=\"k\">.</span>when<span class=\"k\">,</span>","    util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">),</span>","    logger <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/logging'</span><span class=\"k\">).</span>get<span class=\"k\">();</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * HIP Registry client.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name HipRegistry</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> HipRegistry<span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>config<span class=\"k\">.</span>registry <span class=\"k\">||</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>registry<span class=\"k\">.</span>endpoint<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'HIP registry endpoint not found in server config'</span><span class=\"k\">,</span>","                        RainError<span class=\"k\">.</span>ERROR_PRECONDITION_FAILED<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_service <span class=\"k\">=</span> <span class=\"k\">new</span> RestService<span class=\"k\">(</span>config<span class=\"k\">.</span>registry<span class=\"k\">.</span>endpoint<span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Map of Accept headers for each context.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>acceptHeaders <span class=\"k\">=</span> <span class=\"k\">{</span>","    service<span class=\"k\">:</span> <span class=\"s\">'application/vnd.oneandone.hip.registry.service-v1+json'</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Map of context paths with placeholders for each context.</span>","<span class=\"c\"> * Any placeholders supported by ``util.format`` may be used.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>contexts <span class=\"k\">=</span> <span class=\"k\">{</span>","    service<span class=\"k\">:</span>  <span class=\"s\">'/bundles/%s/services/%s'</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Error code for response JSON parse errors.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @type Number</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>ERROR_JSON <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Error code for invalid response errors.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @type Number</span>","<span class=\"c\"> * @private</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>ERROR_ENDPOINT <span class=\"k\">=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns the singleton instance.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @returns {HipRegistry} the singleton instance</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>HipRegistry<span class=\"k\">.</span>_instance<span class=\"k\">)</span> <span class=\"k\">{</span>","        HipRegistry<span class=\"k\">.</span>_instance <span class=\"k\">=</span> <span class=\"k\">new</span> HipRegistry<span class=\"k\">();</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> HipRegistry<span class=\"k\">.</span>_instance<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Retrieves a service's endpoint from within a bundle.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} bundle the bundle id that contains the service</span>","<span class=\"c\"> * @param {String} name the service name to query for</span>","<span class=\"c\"> * @returns {Promise} resolves with the endpoint or with an error</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getService <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bundle<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> deferred <span class=\"k\">=</span> <span class=\"k\">new</span> Deferred<span class=\"k\">(),</span>","        resource <span class=\"k\">=</span> util<span class=\"k\">.</span>format<span class=\"k\">(</span>HipRegistry<span class=\"k\">.</span>contexts<span class=\"k\">.</span>service<span class=\"k\">,</span>","                            encodeURIComponent<span class=\"k\">(</span>bundle<span class=\"k\">),</span>","                            encodeURIComponent<span class=\"k\">(</span>name<span class=\"k\">));</span>","","    logger<span class=\"k\">.</span>debug<span class=\"k\">(</span>util<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">'HIP registry: GET service: %s, %s'</span><span class=\"k\">,</span>","                                bundle<span class=\"k\">,</span> name<span class=\"k\">));</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_service<span class=\"k\">.</span>get<span class=\"k\">(</span>resource<span class=\"k\">,</span> <span class=\"k\">{</span>","        Accept<span class=\"k\">:</span> HipRegistry<span class=\"k\">.</span>acceptHeaders<span class=\"k\">.</span>service","    <span class=\"k\">}</span><span class=\"k\">).</span>then<span class=\"k\">(</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_getServiceSuccess<span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> deferred<span class=\"k\">,</span> bundle<span class=\"k\">,</span> name<span class=\"k\">),</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>_getServiceError<span class=\"k\">.</span>bind<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> deferred<span class=\"k\">,</span> bundle<span class=\"k\">,</span> name<span class=\"k\">)</span>","    <span class=\"k\">);</span>","","    <span class=\"k\">return</span> deferred<span class=\"k\">.</span>promise<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Retrieves a service's endpoint from a successful response (not necessarily a 200).</span>","<span class=\"c\"> * Resolves the promise returned by {@link #getService} with a string or rejects it with an error.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Deferred} deferred the deferred object to reject for this service query</span>","<span class=\"c\"> * @param {String} bundle the bundle id from the request</span>","<span class=\"c\"> * @param {String} name the service name from the request</span>","<span class=\"c\"> * @param {ClientResponse} response the HTTP response object</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getServiceSuccess <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>deferred<span class=\"k\">,</span> bundle<span class=\"k\">,</span> name<span class=\"k\">,</span> response<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">200</span> <span class=\"k\">!==</span> response<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","        logger<span class=\"k\">.</span>error<span class=\"k\">(</span>util<span class=\"k\">.</span>format<span class=\"k\">(</span>","                <span class=\"s\">'HIP registry: GET service: %s, %s (Error: %s)'</span><span class=\"k\">,</span>","                bundle<span class=\"k\">,</span> name<span class=\"k\">,</span> response<span class=\"k\">.</span>statusCode<span class=\"k\">));</span>","        deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Service endpoint couldn</span><span class=\"t\">\\'</span><span class=\"s\">t be retrieved'</span><span class=\"k\">,</span>","                                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">));</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    when<span class=\"k\">(</span>response<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">try</span> <span class=\"k\">{</span>","            body <span class=\"k\">=</span> JSON<span class=\"k\">.</span>parse<span class=\"k\">(</span>body<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","            logger<span class=\"k\">.</span>error<span class=\"k\">(</span>util<span class=\"k\">.</span>format<span class=\"k\">(</span>","                    <span class=\"s\">'HIP registry: GET service: %s, %s (Error: Invalid JSON)'</span><span class=\"k\">,</span>","                    bundle<span class=\"k\">,</span> name<span class=\"k\">),</span> error<span class=\"k\">);</span>","            deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Invalid JSON response'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_IO<span class=\"k\">,</span> HipRegistry<span class=\"k\">.</span>ERROR_JSON<span class=\"k\">));</span>","            <span class=\"k\">return</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>body <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>body<span class=\"k\">.</span>intEndpoint <span class=\"k\">||</span> body<span class=\"k\">.</span>extEndpoint<span class=\"k\">))</span> <span class=\"k\">{</span>","            deferred<span class=\"k\">.</span>resolve<span class=\"k\">(</span>body<span class=\"k\">.</span>intEndpoint <span class=\"k\">||</span> body<span class=\"k\">.</span>extEndpoint<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            logger<span class=\"k\">.</span>error<span class=\"k\">(</span>util<span class=\"k\">.</span>format<span class=\"k\">(</span>","                    <span class=\"s\">'HIP registry: GET service: %s, %s (Error: Endpoint not found)'</span><span class=\"k\">,</span>","                    bundle<span class=\"k\">,</span> name<span class=\"k\">));</span>","            deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Endpoint not found in response'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_IO<span class=\"k\">,</span> HipRegistry<span class=\"k\">.</span>ERROR_ENDPOINT<span class=\"k\">));</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Rejects the promise returned by {@link #getService} with an error due to the request not</span>","<span class=\"c\"> * succeeding.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Deferred} deferred the deferred object to reject for this service query</span>","<span class=\"c\"> * @param {String} bundle the bundle id from the request</span>","<span class=\"c\"> * @param {String} name the service name from the request</span>","<span class=\"c\"> * @param {ClientResponse} response the HTTP response object</span>","<span class=\"c\"> */</span>","HipRegistry<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getServiceError <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>deferred<span class=\"k\">,</span> bundle<span class=\"k\">,</span> name<span class=\"k\">,</span> response<span class=\"k\">)</span> <span class=\"k\">{</span>","    logger<span class=\"k\">.</span>error<span class=\"k\">(</span>util<span class=\"k\">.</span>format<span class=\"k\">(</span>","            <span class=\"s\">'HIP registry: GET service: %s, %s (Error)'</span><span class=\"k\">,</span> bundle<span class=\"k\">,</span> name<span class=\"k\">),</span>","            <span class=\"k\">(</span>response <span class=\"k\">instanceof</span> Error<span class=\"k\">)</span> <span class=\"k\">?</span> response <span class=\"k\">:</span> <span class=\"k\">void</span> <span class=\"s\">0</span><span class=\"k\">);</span>","    deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Service endpoint couldn</span><span class=\"t\">\\'</span><span class=\"s\">t be retrieved'</span><span class=\"k\">,</span>","                                RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">));</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> HipRegistry<span class=\"k\">;</span>"]},"server/hip_session_store.js":{"coverage":[null,14,null,14,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,14,null,null,null,null,null,null,null,null,null,14,14,null,14,null,null,null,null,null,null,14,null,null,null,null,null,null,null,null,null,null,14,5,null,null,5,null,null,null,5,null,null,null,null,null,null,4,0,0,null,null,4,4,4,null,null,4,0,0,null,null,4,4,2,2,0,null,null,4,3,3,3,3,3,3,3,null,3,3,null,3,null,1,1,0,null,null,null,null,0,null,null,0,null,null,5,null,null,null,null,null,null,null,null,null,null,14,1,1,1,null,null,1,null,1,null,null,null,1,null,1,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,1,null,1,null,0,null,0,0,0,null,1,1,1,null,null,1,1,1,null,null,0,0,0,0,0,0,0,0,null,0,0,0,0,null,null,0,null,null,null,null,null,null,null,null,null,null,14,4,null,null,null,4,null,null,null,null,null,null,null,2,null,2,null,null,1,null,0,0,0,null,1,1,1,null,null,2,1,1,null,null,1,1,null,null,1,null,null,null,null,null,null,null,null,null,null,14,4,null,null,null,4,null,null,2,null,2,null,1,null,0,null,0,0,null,1,null,1,1,null,null,2,1,1,null,null,1,1,null,null,1,null,null,null,14],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> path <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'path'</span><span class=\"k\">),</span>","    util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">),</span>","    query <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'querystring'</span><span class=\"k\">),</span>","    extend <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'node.extend'</span><span class=\"k\">),</span>","    crypto <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'crypto'</span><span class=\"k\">),</span>","","    Cookie <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/middleware/session/cookie'</span><span class=\"k\">),</span>","    Session <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/middleware/session/session'</span><span class=\"k\">),</span>","    connectUtils <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/utils'</span><span class=\"k\">),</span>","    RestFactory <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./rest_factory'</span><span class=\"k\">),</span>","    Promise <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">),</span>","","    configuration <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/configuration'</span><span class=\"k\">),</span>","    logger <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/logging'</span><span class=\"k\">).</span>get<span class=\"k\">(),</span>","    BaseSessionStore <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/base_session_store'</span><span class=\"k\">),</span>","    HipSession <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/base_session'</span><span class=\"k\">);</span>","","<span class=\"k\">var</span> seq <span class=\"k\">=</span> Promise<span class=\"k\">.</span>seq<span class=\"k\">,</span>","    when <span class=\"k\">=</span> Promise<span class=\"k\">.</span>when<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * A CloudIA session store implementation for connect.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name HipSessionStore</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> HipSessionStore<span class=\"k\">(</span>cookie<span class=\"k\">)</span> <span class=\"k\">{</span>","    BaseSessionStore<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> cookie<span class=\"k\">);</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf <span class=\"k\">=</span> <span class=\"k\">{</span>","        clientId<span class=\"k\">:</span> configuration<span class=\"k\">.</span>oauth<span class=\"k\">.</span>clientId<span class=\"k\">,</span>","        clientSecret<span class=\"k\">:</span> configuration<span class=\"k\">.</span>oauth<span class=\"k\">.</span>clientSecret<span class=\"k\">,</span>","        clientScope<span class=\"k\">:</span> <span class=\"s\">'hip-rain'</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","util<span class=\"k\">.</span>inherits<span class=\"k\">(</span>HipSessionStore<span class=\"k\">,</span> BaseSessionStore<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns a session instance associated with the session id of the current request and</span>","<span class=\"c\"> * component id. If the specified session id doesn&#226;&#128;&#153;t exist (expired session, wrong cookie data ...)</span>","<span class=\"c\"> * then a new session id will be generated.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Request} request</span>","<span class=\"c\"> * @param {Function} fn the callback that will be called after the session is obtained</span>","<span class=\"c\"> * @returns {HipSessionStore} the session</span>","<span class=\"c\"> */</span>","HipSessionStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>request<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">,</span>","        sessionId <span class=\"k\">=</span> request<span class=\"k\">.</span>sessionId<span class=\"k\">;</span>","","    seq<span class=\"k\">([</span>","        RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                                <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","        <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>get<span class=\"k\">(</span>","                <span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sessionId <span class=\"k\">+</span> <span class=\"s\">'/namespaces/hip-rain/entries/data'</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode <span class=\"k\">!=</span> <span class=\"s\">200</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            self<span class=\"k\">.</span>createNewSession<span class=\"k\">(</span>request<span class=\"k\">,</span> fn<span class=\"k\">);</span>","            <span class=\"k\">return</span> self<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> json <span class=\"k\">=</span> body <span class=\"k\">||</span> <span class=\"s\">'\"\"'</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> sess <span class=\"k\">=</span> JSON<span class=\"k\">.</span>parse<span class=\"k\">(</span>json<span class=\"k\">);</span>","","            <span class=\"c\">// Check if the session was found.</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>sess<span class=\"k\">)</span> <span class=\"k\">{</span>","                self<span class=\"k\">.</span>createNewSession<span class=\"k\">(</span>request<span class=\"k\">,</span> fn<span class=\"k\">);</span>","                <span class=\"k\">return</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> expires<span class=\"k\">;</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>sess<span class=\"k\">.</span>cookie <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> sess<span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires <span class=\"k\">==</span> <span class=\"s\">'string'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                expires <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span>sess<span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>sess<span class=\"k\">.</span>cookie<span class=\"k\">)</span> <span class=\"k\">{</span>","                expires <span class=\"k\">=</span> sess<span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>expires <span class=\"k\">||</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">&lt;</span> expires<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> session <span class=\"k\">=</span> <span class=\"k\">new</span> HipSession<span class=\"k\">(</span>sess <span class=\"k\">||</span> <span class=\"k\">{</span>cookie<span class=\"k\">:</span> cookie<span class=\"k\">}</span><span class=\"k\">,</span> request<span class=\"k\">.</span>component<span class=\"k\">);</span>","                session<span class=\"k\">.</span>id <span class=\"k\">=</span> sessionId<span class=\"k\">;</span>","                session<span class=\"k\">.</span>cookie <span class=\"k\">=</span> sess<span class=\"k\">.</span>cookie<span class=\"k\">;</span>","                session<span class=\"k\">.</span>global <span class=\"k\">=</span> <span class=\"k\">new</span> HipSession<span class=\"k\">(</span>sess<span class=\"k\">);</span>","                session<span class=\"k\">.</span>global<span class=\"k\">.</span>cookie <span class=\"k\">=</span> sess<span class=\"k\">.</span>cookie<span class=\"k\">;</span>","                session<span class=\"k\">.</span>global<span class=\"k\">.</span>id <span class=\"k\">=</span> sessionId<span class=\"k\">;</span>","                session<span class=\"k\">.</span>global<span class=\"k\">.</span>isGlobal <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","                request<span class=\"k\">.</span>sessionId <span class=\"k\">=</span> sessionId<span class=\"k\">;</span>","                request<span class=\"k\">.</span>session <span class=\"k\">=</span> session<span class=\"k\">;</span>","","                fn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> session<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                logger<span class=\"k\">.</span>debug<span class=\"k\">(</span><span class=\"s\">'Destroying expired sessionId: '</span> <span class=\"k\">+</span> sessionId<span class=\"k\">);</span>","                self<span class=\"k\">.</span>destroy<span class=\"k\">(</span>sessionId<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    self<span class=\"k\">.</span>createNewSession<span class=\"k\">(</span>request<span class=\"k\">,</span> fn<span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        logger<span class=\"k\">.</span>error<span class=\"k\">(</span><span class=\"s\">'An error occurred when getting the session from CloudIA: '</span> <span class=\"k\">+</span>","                     <span class=\"k\">(</span>error <span class=\"k\">&amp;&amp;</span> error<span class=\"k\">.</span>message<span class=\"k\">));</span>","","        fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Generates a new session id and creates an empty session associated with this id in the store.</span>","<span class=\"c\"> * If the session can't be created because a session with the same id already exists in the store,</span>","<span class=\"c\"> * it generates a new id until a valid id is generated.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Request} request</span>","<span class=\"c\"> * @param {Function} fn the callback that will be called after the session was created</span>","<span class=\"c\"> */</span>","HipSessionStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>createNewSession <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>request<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> cookie <span class=\"k\">=</span> <span class=\"k\">new</span> Cookie<span class=\"k\">(</span>request<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>cookie<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires <span class=\"k\">==</span> <span class=\"s\">'string'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        cookie<span class=\"k\">.</span>expires <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">var</span> sessionId <span class=\"k\">=</span> crypto<span class=\"k\">.</span>randomBytes<span class=\"k\">(</span><span class=\"s\">16</span><span class=\"k\">).</span>toString<span class=\"k\">(</span><span class=\"s\">'hex'</span><span class=\"k\">);</span>","","    seq<span class=\"k\">([</span>","        RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","        <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> seq<span class=\"k\">([</span>","                <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sessionId<span class=\"k\">,</span>","                            <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span><span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span><span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">function</span> <span class=\"k\">(</span>response<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sessionId <span class=\"k\">+</span>","                        <span class=\"s\">'/namespaces/hip-rain'</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                            <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">function</span> <span class=\"k\">(</span>response<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sessionId <span class=\"k\">+</span>","                        <span class=\"s\">'/namespaces/hip-rain/entries/data'</span><span class=\"k\">,</span>","                        JSON<span class=\"k\">.</span>stringify<span class=\"k\">(</span><span class=\"k\">{</span>","                            cookie<span class=\"k\">:</span> cookie","                        <span class=\"k\">}</span><span class=\"k\">),</span>","                        <span class=\"k\">{</span>","                            <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                        <span class=\"k\">}</span>","                    <span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">]);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> err <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">201</span><span class=\"k\">:</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">401</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Got an unauthorized exception from HIP session store'</span><span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'An error has occurred while setting the session data'</span><span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","            fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> session <span class=\"k\">=</span> <span class=\"k\">new</span> HipSession<span class=\"k\">(</span><span class=\"k\">{</span>cookie<span class=\"k\">:</span> cookie<span class=\"k\">}</span><span class=\"k\">,</span> request<span class=\"k\">.</span>component<span class=\"k\">);</span>","            session<span class=\"k\">.</span>id <span class=\"k\">=</span> sessionId<span class=\"k\">;</span>","            session<span class=\"k\">.</span>cookie <span class=\"k\">=</span> cookie<span class=\"k\">;</span>","            session<span class=\"k\">.</span>global <span class=\"k\">=</span> <span class=\"k\">new</span> HipSession<span class=\"k\">(</span><span class=\"k\">{</span>cookie<span class=\"k\">:</span> cookie<span class=\"k\">}</span><span class=\"k\">);</span>","            session<span class=\"k\">.</span>global<span class=\"k\">.</span>cookie <span class=\"k\">=</span> cookie<span class=\"k\">;</span>","            session<span class=\"k\">.</span>global<span class=\"k\">.</span>id <span class=\"k\">=</span> sessionId<span class=\"k\">;</span>","            session<span class=\"k\">.</span>global<span class=\"k\">.</span>isGlobal <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","            request<span class=\"k\">.</span>sessionId <span class=\"k\">=</span> sessionId<span class=\"k\">;</span>","            request<span class=\"k\">.</span>session <span class=\"k\">=</span> session<span class=\"k\">;</span>","            request<span class=\"k\">.</span>sessionIsNew <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            fn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> request<span class=\"k\">.</span>session<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Destroys the session associated with the specified session id.</span>","<span class=\"c\"> * This method will be invoked when a user is logging out.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Session} session the session to save</span>","<span class=\"c\"> * @param {Function} fn the callback that will be called after the session was saved</span>","<span class=\"c\"> */</span>","HipSessionStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>save <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>session<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    seq<span class=\"k\">([</span>","         RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                 <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","         <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","             <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span>","                     <span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> session<span class=\"k\">.</span>id <span class=\"k\">+</span> <span class=\"s\">'/namespaces/hip-rain/entries/data'</span><span class=\"k\">,</span>","                     JSON<span class=\"k\">.</span>stringify<span class=\"k\">(</span>session<span class=\"k\">.</span>_session<span class=\"k\">),</span>","                     <span class=\"k\">{</span>","                         <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                     <span class=\"k\">}</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","     <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> err <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","         <span class=\"k\">switch</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","             <span class=\"k\">case</span> <span class=\"s\">200</span><span class=\"k\">:</span>","             <span class=\"k\">case</span> <span class=\"s\">201</span><span class=\"k\">:</span>","                 <span class=\"k\">break</span><span class=\"k\">;</span>","             <span class=\"k\">case</span> <span class=\"s\">401</span><span class=\"k\">:</span>","                 err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Got an unauthorized exception from HIP session store'</span><span class=\"k\">);</span>","                 err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                 <span class=\"k\">break</span><span class=\"k\">;</span>","             <span class=\"k\">default</span><span class=\"k\">:</span>","                 err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'An error has occurred while setting the session data'</span><span class=\"k\">);</span>","                 err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                 <span class=\"k\">break</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","             fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","             <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","             fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">();</span>","         <span class=\"k\">}</span><span class=\"k\">);</span>","     <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","         fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","     <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Destroys the session associated with the specified session id.</span>","<span class=\"c\"> * This method will be invoked when a user is logging out.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} sessionId the session id</span>","<span class=\"c\"> * @param {Function} fn the callback that will be called after the session was saved</span>","<span class=\"c\"> */</span>","HipSessionStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>destroy <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>sessionId<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    seq<span class=\"k\">([</span>","         RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                         <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","         <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","             <span class=\"k\">return</span> sessionService<span class=\"k\">[</span><span class=\"s\">'delete'</span><span class=\"k\">](</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sessionId<span class=\"k\">);</span>","         <span class=\"k\">}</span>","     <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> err<span class=\"k\">;</span>","","         <span class=\"k\">switch</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","             <span class=\"k\">case</span> <span class=\"s\">200</span><span class=\"k\">:</span>","                 <span class=\"k\">break</span><span class=\"k\">;</span>","             <span class=\"k\">case</span> <span class=\"s\">401</span><span class=\"k\">:</span>","                 err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Got an unauthorized exception from the HIP session store.'</span><span class=\"k\">,</span>","                     RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                 err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                 <span class=\"k\">break</span><span class=\"k\">;</span>","             <span class=\"k\">default</span><span class=\"k\">:</span>","                 err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'An error has occured while generating a session.'</span><span class=\"k\">,</span>","                     RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                 err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                 <span class=\"k\">break</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","             fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>err<span class=\"k\">);</span>","             <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","             fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">();</span>","         <span class=\"k\">}</span><span class=\"k\">);</span>","     <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","         fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">);</span>","     <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> HipSessionStore<span class=\"k\">;</span>"]},"server/hip_store.js":{"coverage":[null,16,null,16,null,16,null,null,null,null,null,null,16,null,null,null,null,null,16,null,null,null,null,null,null,null,null,null,16,16,16,null,null,null,null,null,null,16,null,null,null,null,null,null,null,null,null,null,null,16,7,null,7,null,null,null,7,null,null,null,null,null,null,5,null,5,null,4,null,0,null,0,0,null,0,null,0,0,null,1,null,1,1,null,null,5,1,1,null,null,4,4,4,4,1,1,null,null,3,1,1,null,null,2,null,null,2,1,null,1,null,null,null,1,null,null,7,null,null,null,null,null,null,null,null,null,null,16,4,null,null,null,4,null,null,null,null,null,null,null,2,null,2,null,1,null,0,null,0,0,null,1,null,1,1,null,null,2,1,1,null,null,1,1,null,null,1,null,null,4,null,null,null,null,null,null,null,null,null,16,4,null,null,null,4,null,null,2,null,2,null,1,null,0,null,0,0,null,1,null,1,1,null,null,2,1,1,null,null,1,1,null,null,1,null,null,null,null,null,null,null,null,null,16,1,1,1,null,1,null,null,null,1,null,1,null,null,null,1,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,16],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> path <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'path'</span><span class=\"k\">);</span>","","<span class=\"k\">var</span> Store <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/middleware/session/store'</span><span class=\"k\">),</span>","    Cookie <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/middleware/session/cookie'</span><span class=\"k\">),</span>","    Session <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/middleware/session/session'</span><span class=\"k\">),</span>","    RestFactory <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./rest_factory'</span><span class=\"k\">),</span>","    Promise <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">),</span>","    configuration <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/configuration'</span><span class=\"k\">);</span>","","<span class=\"k\">var</span> util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">),</span>","    connectUtils <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'connect/lib/utils'</span><span class=\"k\">),</span>","    query <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'querystring'</span><span class=\"k\">),</span>","    extend <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'node.extend'</span><span class=\"k\">),</span>","    crypto <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'crypto'</span><span class=\"k\">);</span>","","<span class=\"k\">var</span> seq <span class=\"k\">=</span> Promise<span class=\"k\">.</span>seq<span class=\"k\">,</span>","    when <span class=\"k\">=</span> Promise<span class=\"k\">.</span>when<span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * A CloudIA session store implementation for connect.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name HipStore</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> HipStore <span class=\"k\">=</span> <span class=\"k\">function</span> HipStore<span class=\"k\">(</span>cookie<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>cookie <span class=\"k\">=</span> cookie<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf <span class=\"k\">=</span> <span class=\"k\">{</span>","        clientId<span class=\"k\">:</span> configuration<span class=\"k\">.</span>oauth<span class=\"k\">.</span>clientId<span class=\"k\">,</span>","        clientSecret<span class=\"k\">:</span> configuration<span class=\"k\">.</span>oauth<span class=\"k\">.</span>clientSecret<span class=\"k\">,</span>","        clientScope<span class=\"k\">:</span> <span class=\"s\">'hip-rain'</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","util<span class=\"k\">.</span>inherits<span class=\"k\">(</span>HipStore<span class=\"k\">,</span> Store<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Get the data from the CloudIA session store.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Also handles session expiration by looking at the stored cookie data.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} sid the session id</span>","<span class=\"c\"> * @param {Function} fn the callback that will be called when the request is complete</span>","<span class=\"c\"> * @returns {HipStore} the instance of the store</span>","<span class=\"c\"> * @see connect session middleware</span>","<span class=\"c\"> */</span>","HipStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>sid<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> self <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","    seq<span class=\"k\">([</span>","        RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                                <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","        <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>get<span class=\"k\">(</span>","                <span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sid <span class=\"k\">+</span> <span class=\"s\">'/namespaces/hip-rain/entries/data'</span><span class=\"k\">,</span>","                <span class=\"k\">{</span>","                    <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> err<span class=\"k\">;</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">200</span><span class=\"k\">:</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">401</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Got an unauthorized exception from HIP session store'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">404</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Session not found in HIP session store'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> <span class=\"s\">'ENOENT'</span><span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'An error has occured while getting the session data'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> <span class=\"s\">'ENOENT'</span><span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","            fn<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> self<span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> json <span class=\"k\">=</span> body <span class=\"k\">||</span> <span class=\"s\">'\"\"'</span><span class=\"k\">;</span>","            <span class=\"k\">var</span> sess <span class=\"k\">=</span> JSON<span class=\"k\">.</span>parse<span class=\"k\">(</span>json<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>sess<span class=\"k\">)</span> <span class=\"k\">{</span>","                fn<span class=\"k\">();</span>","                <span class=\"k\">return</span> self<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>sess<span class=\"k\">.</span>cookie<span class=\"k\">)</span> <span class=\"k\">{</span>","                fn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> sess<span class=\"k\">);</span>","                <span class=\"k\">return</span> self<span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> expires <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> sess<span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires <span class=\"k\">===</span> <span class=\"s\">'string'</span><span class=\"k\">)</span> <span class=\"k\">?</span>","                    <span class=\"k\">new</span> Date<span class=\"k\">(</span>sess<span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires<span class=\"k\">)</span> <span class=\"k\">:</span> sess<span class=\"k\">.</span>cookie<span class=\"k\">.</span>expires<span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(!</span>expires <span class=\"k\">||</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span> <span class=\"k\">&lt;</span> expires<span class=\"k\">)</span> <span class=\"k\">{</span>","                fn<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> sess<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                self<span class=\"k\">.</span>destroy<span class=\"k\">(</span>sid<span class=\"k\">,</span> fn<span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Saves the session to the CloudIA session store.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} sid the session id</span>","<span class=\"c\"> * @param {Session} sess the session data</span>","<span class=\"c\"> * @param {Function} fn the callback to be called once the save is complete</span>","<span class=\"c\"> * @returns {HipStore} the store instance</span>","<span class=\"c\"> */</span>","HipStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>set <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>sid<span class=\"k\">,</span> sess<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    seq<span class=\"k\">([</span>","        RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","        <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span>","                    <span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sid <span class=\"k\">+</span> <span class=\"s\">'/namespaces/hip-rain/entries/data'</span><span class=\"k\">,</span>","                    JSON<span class=\"k\">.</span>stringify<span class=\"k\">(</span>sess<span class=\"k\">),</span>","                    <span class=\"k\">{</span>","                        <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> err <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">200</span><span class=\"k\">:</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">401</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Got an unauthorized exception from HIP session store'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'An error has occured while setting the session data'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","            fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>err<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","            fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Remove a session from the session store.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} sid the session id to destroy</span>","<span class=\"c\"> * @param {Function} [fn] optional callback that gets called when the delete is successful</span>","<span class=\"c\"> * @returns {HipStore} the store instance</span>","<span class=\"c\"> */</span>","HipStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>destroy <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>sid<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","    seq<span class=\"k\">([</span>","        RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","        <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> sessionService<span class=\"k\">[</span><span class=\"s\">'delete'</span><span class=\"k\">](</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> sid<span class=\"k\">);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> err<span class=\"k\">;</span>","","        <span class=\"k\">switch</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">200</span><span class=\"k\">:</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">401</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Got an unauthorized exception from the HIP session store.'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">default</span><span class=\"k\">:</span>","                err <span class=\"k\">=</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'An error has occured while generating a session.'</span><span class=\"k\">,</span>","                    RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">);</span>","                err<span class=\"k\">.</span>code <span class=\"k\">=</span> res<span class=\"k\">.</span>statusCode<span class=\"k\">;</span>","                <span class=\"k\">break</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">if</span> <span class=\"k\">(</span>err<span class=\"k\">)</span> <span class=\"k\">{</span>","            fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>err<span class=\"k\">);</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","","        when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","            fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">();</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        fn <span class=\"k\">&amp;&amp;</span> fn<span class=\"k\">(</span>error<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Generate a new session.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Http.Request} request the http request to attach the session to</span>","<span class=\"c\"> * @returns {Promise} a promise that will get resolved after the session has been generated</span>","<span class=\"c\"> */</span>","HipStore<span class=\"k\">.</span>prototype<span class=\"k\">.</span>generate <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>request<span class=\"k\">)</span> <span class=\"k\">{</span>","    request<span class=\"k\">.</span>sessionID <span class=\"k\">=</span> crypto<span class=\"k\">.</span>createHash<span class=\"k\">(</span><span class=\"s\">'sha1'</span><span class=\"k\">).</span>update<span class=\"k\">(</span>connectUtils<span class=\"k\">.</span>uid<span class=\"k\">(</span><span class=\"s\">24</span><span class=\"k\">)).</span>digest<span class=\"k\">(</span><span class=\"s\">'hex'</span><span class=\"k\">);</span>","    request<span class=\"k\">.</span>session <span class=\"k\">=</span> <span class=\"k\">new</span> Session<span class=\"k\">(</span>request<span class=\"k\">);</span>","    request<span class=\"k\">.</span>session<span class=\"k\">.</span>cookie <span class=\"k\">=</span> <span class=\"k\">new</span> Cookie<span class=\"k\">(</span>request<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>cookie<span class=\"k\">);</span>","","    <span class=\"k\">return</span> seq<span class=\"k\">([</span>","        RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-sessionstore'</span><span class=\"k\">,</span>","                        <span class=\"k\">this</span><span class=\"k\">.</span>oAuthConf<span class=\"k\">),</span>","        <span class=\"k\">function</span> <span class=\"k\">(</span>sessionService<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> seq<span class=\"k\">([</span>","                <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> request<span class=\"k\">.</span>sessionID<span class=\"k\">,</span>","                            <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span><span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span><span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">function</span> <span class=\"k\">(</span>response<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> request<span class=\"k\">.</span>sessionID <span class=\"k\">+</span>","                        <span class=\"s\">'/namespaces/hip-rain'</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                            <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span><span class=\"k\">,</span>","                <span class=\"k\">function</span> <span class=\"k\">(</span>response<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> sessionService<span class=\"k\">.</span>put<span class=\"k\">(</span><span class=\"s\">'/sessions/'</span> <span class=\"k\">+</span> request<span class=\"k\">.</span>sessionID <span class=\"k\">+</span>","                        <span class=\"s\">'/namespaces/hip-rain/entries/data'</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                            <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'text/vnd.oneandone.hip.session-v1+plain'</span>","                        <span class=\"k\">}</span><span class=\"k\">);</span>","                <span class=\"k\">}</span>","            <span class=\"k\">]);</span>","        <span class=\"k\">}</span>","    <span class=\"k\">]);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> HipStore<span class=\"k\">;</span>"]},"server/identity_provider/hip_identity_provider.js":{"coverage":[null,11,null,11,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,11,11,null,null,11,null,null,null,null,null,null,null,null,11,6,null,6,6,1,1,null,null,5,null,null,null,null,null,null,5,null,null,null,null,null,null,null,3,3,1,null,1,null,2,2,1,1,0,null,0,null,2,null,null,null,null,1,null,1,null,null,null,null,6,null,null,null,null,null,null,11,1,null,null,null,null,null,null,null,null,null,11,3,1,null,null,null,2,1,null,null,null,null,11],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> path <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'path'</span><span class=\"k\">),</span>","    util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">),</span>","    querystring <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'querystring'</span><span class=\"k\">),</span>","","    defer <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">).</span>defer<span class=\"k\">,</span>","    seq <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">).</span>seq<span class=\"k\">,</span>","    when <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/promise'</span><span class=\"k\">).</span>when<span class=\"k\">,</span>","","    mockPermission <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./mock_permissions'</span><span class=\"k\">),</span>","    conf <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/configuration'</span><span class=\"k\">),</span>","    logger <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/logging'</span><span class=\"k\">).</span>get<span class=\"k\">(),</span>","    RestFactory <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'../rest_factory'</span><span class=\"k\">),</span>","    IdentityProvider <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/security'</span><span class=\"k\">).</span>IdentityProvider<span class=\"k\">,</span>","    HipUser <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'./hip_user'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * This is an IdentityProvider implementation using the CloudIA services.</span>","<span class=\"c\"> * For now the permissions are mocked.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name HipIdentityProvider</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> HipIdentityProvider<span class=\"k\">(</span>session<span class=\"k\">)</span> <span class=\"k\">{</span>","    IdentityProvider<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> session<span class=\"k\">);</span>","<span class=\"k\">}</span>","","util<span class=\"k\">.</span>inherits<span class=\"k\">(</span>HipIdentityProvider<span class=\"k\">,</span> IdentityProvider<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Authenticates the user.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} username the user's identity</span>","<span class=\"c\"> * @param {string} password the user's password</span>","<span class=\"c\"> * @returns {Promise} a promise that will be resolved with the user information or rejected with an RainError</span>","<span class=\"c\"> */</span>","HipIdentityProvider<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_authenticate <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>username<span class=\"k\">,</span> password<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> deferred <span class=\"k\">=</span> defer<span class=\"k\">();</span>","","    <span class=\"k\">var</span> error <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_validate<span class=\"k\">(</span>username<span class=\"k\">,</span> password<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","        process<span class=\"k\">.</span>nextTick<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","            deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span>error<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        seq<span class=\"k\">([</span>","            RestFactory<span class=\"k\">.</span>create<span class=\"k\">.</span>bind<span class=\"k\">(</span>RestFactory<span class=\"k\">,</span> <span class=\"s\">'hip-bundle'</span><span class=\"k\">,</span> <span class=\"s\">'hip-idp'</span><span class=\"k\">,</span> <span class=\"k\">{</span>","                clientId<span class=\"k\">:</span> conf<span class=\"k\">.</span>oauth<span class=\"k\">.</span>clientId<span class=\"k\">,</span>","                clientSecret<span class=\"k\">:</span> conf<span class=\"k\">.</span>oauth<span class=\"k\">.</span>clientSecret<span class=\"k\">,</span>","                clientScope<span class=\"k\">:</span> <span class=\"s\">'hip-rain'</span>","            <span class=\"k\">}</span><span class=\"k\">),</span>","            <span class=\"k\">function</span> <span class=\"k\">(</span>idpService<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> idpService<span class=\"k\">.</span>post<span class=\"k\">(</span><span class=\"s\">'/account/login'</span><span class=\"k\">,</span>","                    querystring<span class=\"k\">.</span>stringify<span class=\"k\">(</span><span class=\"k\">{</span>username<span class=\"k\">:</span> username<span class=\"k\">,</span> password<span class=\"k\">:</span> password<span class=\"k\">}</span><span class=\"k\">),</span>","                    <span class=\"k\">{</span>","                        <span class=\"s\">'Content-Type'</span><span class=\"k\">:</span> <span class=\"s\">'application/x-www-form-urlencoded'</span><span class=\"k\">,</span>","                        <span class=\"s\">'Accept'</span><span class=\"k\">:</span> <span class=\"s\">'application/json'</span>","                    <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","        <span class=\"k\">]).</span>then<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>res<span class=\"k\">)</span> <span class=\"k\">{</span>","            when<span class=\"k\">(</span>res<span class=\"k\">.</span>body<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">),</span> <span class=\"k\">function</span> <span class=\"k\">(</span>body<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>res<span class=\"k\">.</span>statusCode <span class=\"k\">!==</span> <span class=\"s\">200</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                    deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span>body<span class=\"k\">,</span> RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">,</span>","                            res<span class=\"k\">.</span>statusCode<span class=\"k\">));</span>","                    <span class=\"k\">return</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">try</span> <span class=\"k\">{</span>","                    <span class=\"k\">var</span> parsed <span class=\"k\">=</span> JSON<span class=\"k\">.</span>parse<span class=\"k\">(</span>body<span class=\"k\">);</span>","                    <span class=\"k\">var</span> user <span class=\"k\">=</span> mockPermission<span class=\"k\">[</span>username<span class=\"k\">];</span>","                    user<span class=\"k\">.</span>id <span class=\"k\">=</span> parsed<span class=\"k\">.</span>userIdentifier<span class=\"k\">.</span>userId<span class=\"k\">;</span>","                    user<span class=\"k\">.</span>username <span class=\"k\">=</span> username<span class=\"k\">;</span>","","                    deferred<span class=\"k\">.</span>resolve<span class=\"k\">(</span>user<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                    deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span>body<span class=\"k\">,</span> RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">,</span>","                            <span class=\"s\">500</span><span class=\"k\">));</span>","                <span class=\"k\">}</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","            logger<span class=\"k\">.</span>error<span class=\"k\">(</span>util<span class=\"k\">.</span>format<span class=\"k\">(</span><span class=\"s\">'HIP IDP: authenticate: %s (Error: %s)'</span><span class=\"k\">,</span>","                    username<span class=\"k\">,</span> error<span class=\"k\">.</span>message<span class=\"k\">),</span> error<span class=\"k\">);</span>","            deferred<span class=\"k\">.</span>reject<span class=\"k\">(</span><span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'Authentication request failed'</span><span class=\"k\">,</span>","                RainError<span class=\"k\">.</span>ERROR_HTTP<span class=\"k\">,</span> <span class=\"s\">500</span><span class=\"k\">));</span>","        <span class=\"k\">}</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> deferred<span class=\"k\">.</span>promise<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Gets the constructor for the user implementation specific for CloudIA authentication.</span>","<span class=\"c\"> * @returns</span>","<span class=\"c\"> */</span>","HipIdentityProvider<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_getUserClass <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> HipUser<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Checks the username and password to ensure they aren't empty.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} username the username</span>","<span class=\"c\"> * @param {String} password the password</span>","<span class=\"c\"> * @returns {RainError} if username and / or password are invalid</span>","<span class=\"c\"> */</span>","HipIdentityProvider<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_validate <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>username<span class=\"k\">,</span> password<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(!</span>username<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'The username parameter is missing.'</span><span class=\"k\">,</span>","            RainError<span class=\"k\">.</span>ERROR_PRECONDITION_FAILED<span class=\"k\">,</span> <span class=\"s\">'username'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">if</span> <span class=\"k\">(!</span>password<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'The password parameter is missing.'</span><span class=\"k\">,</span>","            RainError<span class=\"k\">.</span>ERROR_PRECONDITION_FAILED<span class=\"k\">,</span> <span class=\"s\">'password'</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> HipIdentityProvider<span class=\"k\">;</span>"]},"server/rest_service.js":{"coverage":[null,15,null,15,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,15,13,null,1,null,null,null,12,12,null,null,null,null,null,null,null,15,12,null,12,12,12,12,null,null,null,null,null,null,null,null,null,null,null,15,6,null,null,null,null,null,null,null,null,null,6,null,6,1,null,null,6,null,null,null,null,null,null,null,null,null,15,1,null,null,null,null,null,null,null,null,null,15,1,null,null,null,null,null,null,null,null,null,null,15,1,null,null,null,null,null,null,null,null,null,null,15,1,null,null,null,null,null,null,null,null,15,4,3,null,null,4,null,null,15],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> http <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'promised-io/http-client'</span><span class=\"k\">),</span>","    path <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'path'</span><span class=\"k\">),</span>","    url <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'url'</span><span class=\"k\">),</span>","    extend <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'node.extend'</span><span class=\"k\">),</span>","    util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * A simple client for REST service endpoints. This uses a promise based http client implementation</span>","<span class=\"c\"> * that returns an augmentet response object.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * One of the highlights of this response object is the</span>","<span class=\"c\"> * ``response.body`` property which is a promised-io LazyArray which will contain all the data</span>","<span class=\"c\"> * from the response body.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Example::</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *      var service = new RestService('http://domain.tld/endpoint');</span>","<span class=\"c\"> *      service.get('/resource', {</span>","<span class=\"c\"> *          'Accept': 'text/json'</span>","<span class=\"c\"> *      }).then(function (response) {</span>","<span class=\"c\"> *          when(response.body.join(''), function (data) {</span>","<span class=\"c\"> *              console.log(data);</span>","<span class=\"c\"> *          });</span>","<span class=\"c\"> *      }, function (error) {</span>","<span class=\"c\"> *          console.log(error);</span>","<span class=\"c\"> *      });</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * For more information on LazyArrays read more about `Promised IO &lt;https://github.com/kriszyp/promised-io&gt;`_.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name RestService</span>","<span class=\"c\"> * @class</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} endpoint the service endpoint to be accessed</span>","<span class=\"c\"> * @param {Object} [headers] headers to be added to every request from this client</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> RestService<span class=\"k\">(</span>endpoint<span class=\"k\">,</span> headers<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> endpoint <span class=\"k\">!==</span> <span class=\"s\">'string'</span> <span class=\"k\">&amp;&amp;</span>","            <span class=\"k\">!(</span>endpoint <span class=\"k\">instanceof</span> String<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">new</span> RainError<span class=\"k\">(</span><span class=\"s\">'expected endpoint to be a string'</span><span class=\"k\">,</span>","                            RainError<span class=\"k\">.</span>ERROR_PRECONDITION_FAILED<span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>setEndpoint<span class=\"k\">(</span>endpoint<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>headers <span class=\"k\">=</span> headers <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Set the endpoint for the service.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} endpoint the service endpoint</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">.</span>setEndpoint <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>endpoint<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> endpointConfig <span class=\"k\">=</span> url<span class=\"k\">.</span>parse<span class=\"k\">(</span>endpoint<span class=\"k\">);</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>protocol <span class=\"k\">=</span> endpointConfig<span class=\"k\">.</span>protocol<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>host <span class=\"k\">=</span> endpointConfig<span class=\"k\">.</span>hostname<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>port <span class=\"k\">=</span> endpointConfig<span class=\"k\">.</span>port <span class=\"k\">||</span> <span class=\"s\">80</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>path <span class=\"k\">=</span> endpointConfig<span class=\"k\">.</span>path<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Make a REST request to a resource with a given method and a set of headers and data.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} method the http verb to use for making the request</span>","<span class=\"c\"> * @param {String} resource the resource to which the request is made</span>","<span class=\"c\"> * @param {Object} [headers] the http headers to be sent to the server</span>","<span class=\"c\"> * @param {String[]} [data] the data to be sent to the server</span>","<span class=\"c\"> * @returns {Promise} a promise that will be resolved when the request is finished</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">.</span>request <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>method<span class=\"k\">,</span> resource<span class=\"k\">,</span> headers<span class=\"k\">,</span> data<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> options <span class=\"k\">=</span> <span class=\"k\">{</span>","            protocol<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>protocol<span class=\"k\">,</span>","            hostname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>host<span class=\"k\">,</span>","            port<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>port<span class=\"k\">,</span>","            method<span class=\"k\">:</span> method <span class=\"k\">||</span> <span class=\"s\">'GET'</span><span class=\"k\">,</span>","            pathname<span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>path <span class=\"k\">+</span> <span class=\"k\">(</span>resource <span class=\"k\">||</span> <span class=\"s\">''</span><span class=\"k\">),</span>","            headers<span class=\"k\">:</span> headers <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","            timeout<span class=\"k\">:</span> <span class=\"s\">15000</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","","    extend<span class=\"k\">(</span>options<span class=\"k\">.</span>headers<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>headers<span class=\"k\">);</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","        options<span class=\"k\">.</span>body <span class=\"k\">=</span> data<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> http<span class=\"k\">.</span>request<span class=\"k\">(</span>options<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * An alias for the request method that reads some data from a resource.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} resource the resource to read data from</span>","<span class=\"c\"> * @param {Object} [headers] the headers to be sent to the server</span>","<span class=\"c\"> * @returns {Promise} a promise that will be resolved when the request is finished</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">.</span>get <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>resource<span class=\"k\">,</span> headers<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span><span class=\"s\">'GET'</span><span class=\"k\">,</span> resource<span class=\"k\">,</span> headers<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * An alias for the request method that deletes a resource.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} resource the resource to delete</span>","<span class=\"c\"> * @param {Object} [headers] the headers to be sent to the server</span>","<span class=\"c\"> * @returns {Promise} a promise that will be resolved when the request is finished</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">[</span><span class=\"s\">'delete'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>resource<span class=\"k\">,</span> headers<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span><span class=\"s\">'DELETE'</span><span class=\"k\">,</span> resource<span class=\"k\">,</span> headers<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * An alias for the request method that creates a resource.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} resource the resource that will be created</span>","<span class=\"c\"> * @param {String[]|String} data the data to be inserted in the resource</span>","<span class=\"c\"> * @param {Object} [headers] the headers to be sent to the server</span>","<span class=\"c\"> * @returns {Promise} a promise that will be resolved when the request is finished</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">.</span>put <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>resource<span class=\"k\">,</span> data<span class=\"k\">,</span> headers<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span><span class=\"s\">'PUT'</span><span class=\"k\">,</span> resource<span class=\"k\">,</span> headers<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_sanitize<span class=\"k\">(</span>data<span class=\"k\">));</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * An alias for the request method that updates a resource.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {String} resource the resource that will be updated</span>","<span class=\"c\"> * @param {Object} data the data to be inserted in the resource</span>","<span class=\"c\"> * @param {Object} [headers] the headers to be sent to the server</span>","<span class=\"c\"> * @returns {Promise} a promise that will be resolved when the request is finished</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">.</span>post <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>resource<span class=\"k\">,</span> data<span class=\"k\">,</span> headers<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>request<span class=\"k\">(</span><span class=\"s\">'POST'</span><span class=\"k\">,</span> resource<span class=\"k\">,</span> headers<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>_sanitize<span class=\"k\">(</span>data<span class=\"k\">));</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Sanitizes data for request body.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Any} data</span>","<span class=\"c\"> * @returns {Any[]} generates an array if data isn't one</span>","<span class=\"c\"> */</span>","RestService<span class=\"k\">.</span>prototype<span class=\"k\">.</span>_sanitize <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>data <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>util<span class=\"k\">.</span>isArray<span class=\"k\">(</span>data<span class=\"k\">))</span> <span class=\"k\">{</span>","        data <span class=\"k\">=</span> <span class=\"k\">[</span>data<span class=\"k\">];</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">return</span> data<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> RestService<span class=\"k\">;</span>"]},"server/identity_provider/hip_user.js":{"coverage":[null,3,null,3,null,null,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,null,0,0,null,null,0,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,null,null,0,0,null,0,0,null,0,null,null,0],"source":["<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"k\">var</span> User <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'rain/lib/security'</span><span class=\"k\">).</span>User<span class=\"k\">,</span>","    util <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'util'</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * The user used with HIP authentication.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @name HipUser</span>","<span class=\"c\"> * @param {Object|User} obj contains the data used to initialize an user.</span>","<span class=\"c\"> * @param {String} obj.country the user country</span>","<span class=\"c\"> * @param {String} obj.language the user language</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> HipUser <span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","    User<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> obj<span class=\"k\">);</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">'undefined'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span><span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"k\">this</span><span class=\"k\">.</span>_country <span class=\"k\">=</span> obj<span class=\"k\">.</span>country<span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>_language <span class=\"k\">=</span> obj<span class=\"k\">.</span>language<span class=\"k\">;</span>","<span class=\"k\">}</span>","","util<span class=\"k\">.</span>inherits<span class=\"k\">(</span>HipUser<span class=\"k\">,</span> User<span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Gets the user country.</span>","<span class=\"c\"> * @name id</span>","<span class=\"c\"> * @memberOf User#</span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> */</span>","Object<span class=\"k\">.</span>defineProperty<span class=\"k\">(</span>HipUser<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"s\">'country'</span><span class=\"k\">,</span> <span class=\"k\">{</span>get<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_country<span class=\"k\">;</span>","<span class=\"k\">}}</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Gets the user language.</span>","<span class=\"c\"> * @name id</span>","<span class=\"c\"> * @memberOf User#</span>","<span class=\"c\"> * @type {String}</span>","<span class=\"c\"> */</span>","Object<span class=\"k\">.</span>defineProperty<span class=\"k\">(</span>HipUser<span class=\"k\">.</span>prototype<span class=\"k\">,</span> <span class=\"s\">'language'</span><span class=\"k\">,</span> <span class=\"k\">{</span>get<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>_language<span class=\"k\">;</span>","<span class=\"k\">}}</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Overrides the toJSON method in order to return a correct JSON representation for the</span>","<span class=\"c\"> * user object.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @returns {Object} an object that contains the properties that will be serialized to JSON</span>","<span class=\"c\"> * @protected</span>","<span class=\"c\"> */</span>","HipUser<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toJSON <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> obj <span class=\"k\">=</span> User<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toJSON<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","","    obj<span class=\"k\">.</span>country <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_country<span class=\"k\">;</span>","    obj<span class=\"k\">.</span>language <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_language<span class=\"k\">;</span>","","    <span class=\"k\">return</span> obj<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","module<span class=\"k\">.</span>exports <span class=\"k\">=</span> HipUser<span class=\"k\">;</span>"]}}
