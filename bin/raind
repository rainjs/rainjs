#!/usr/bin/env node

//Copyright Â© 2012 rainjs
//
// All rights reserved
//
// Redistribution and use in source and binary forms, with or without modification, are permitted
// provided that the following conditions are met:
//
//    1. Redistributions of source code must retain the above copyright notice, this list of
//       conditions and the following disclaimer.
//    2. Redistributions in binary form must reproduce the above copyright notice, this list of
//       conditions and the following disclaimer in the documentation and/or other materials
//       provided with the distribution.
//    3. Neither the name of The author nor the names of its contributors may be used to endorse or
//       promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
// SHALL THE AUTHOR AND CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"use strict";

require('../lib/globals');

var program = require('commander'),
    path = require('path'),
    fs = require('fs'),
    sdkUtils = require('./lib/utils');

var root = path.dirname(__dirname),
    version;

function getProjectRoot(dir) {
    try {
        return sdkUtils.getProjectRoot(dir);
    } catch (e) {
        process.exit(1);
    }
}

try {
    version = require(path.join(root, 'package.json')).version;
} catch (e) {
    version = '0.1.0';
}
program
    .version(version)
    .usage('[options]')
    .option('-d, --debug', 'start the server in debug mode')
    .option('-D, --dir <path>', 'the server working directory', getProjectRoot(process.env.RAIN_CWD || process.cwd()));

program.parse(process.argv);

if (program.debug && process.platform !== 'win32') {
    // notify the node process that it needs to attach a debug server to itself
    process.kill(process.pid, 'SIGUSR1');
}

process.title = 'raind';

try {
    process.chdir(program.dir);
} catch (e) {
}

var server = require(path.join(root, 'lib', 'server'));

var closeServer = function (error) {
    server.close(error);
};

var logRotate = function () {
    server.logRotate();
}

if (process.platform !== 'win32') {
    // initialize shutdown signal handlers
    process.on('SIGTERM', closeServer);
    process.on('SIGQUIT', closeServer);
    process.on('SIGINT', closeServer);
    process.on('SIGUSR2', logRotate);
}

// add an uncaught exception handler to shutdown the server softly
process.on('uncaughtException', closeServer);

// start the server
server.start();
